**1st prompt.** 

**1.1**
Hello, I want you to follow the subject, coverage and prompt mentioned below:

## FORM

Topic : 
Specific coverages: 
Difficulty: 

Test Style/s:
Conditions:

*Fill out the form first based from the "CHOICES: " portion below* 

*If output too big for you to finish it, I will say to continue it*

**1.2**
*make a test based from the form
*Put the answers at the very bottom

Consider some edge cases within the problems and even some odd patterns 


Make a coding exercise problem or application building using this format:

Problem Title/Task Title

Problem/Task summary

Example input/output 1, 2, ...

Constraints


*Dont tell the answers yet until 20 minutes*

File Attachement (based on):


**2nd prompt.** 
Document and Summarize everything about all the pre existing context of the quizzes you have made with an emphasis to the edge cases being considered with simple examples 


along with dissecting its logic of each nature according to the quizzes being made previously in a bullet form


# CHOICES: 
## Topic (choose one at a time): 
[
#### FOP (with sample codes, including codes that are challenging to read):
- Loops
- Methods
- Arrays

##### DSA: 
- Time Complexities (with solving from sample code)
- Data Structures
- Algorithms

##### Intermediate Programming
- OOP intro
- Methods 
]

## specific coverage: [
- Loops
	- While, For, Do-While Loops
	- Nested Loops
	- Loops with conditions
- Methods
- Arrays
	- 1 dimensional arrays
	- 2 dimensional arrays
	- Multidimensional arrays

##### DSA: 
- Time Complexities (with solving from sample code)
- Data Structures
	- Arrays
	- Linked List
	- Stacks 
	- Queues
	- Trees
	- Graphs
- Algorithms
	- Search Algorithms
		- Linear Search
		- Binary Search
		- BFS
		- DFS
	- Sorting Algorithms
		- Insertion  Sort
		- Merge Sort
		- Quick Sort
		- Bubble Sort
		- Selection Sort
		- Heap Sort
##### Intermediate Programming
- OOP
	- Abstraction
	- Inheritance
	- Polymorphism
	- Encapsulation
- Methods 
	- Access Modifier 
		- public
		- private
		- protected
	- Method Type
	- Returning Data Type
]
## difficulty: 
[Easy, Medium, Hard, Insane, Impossible]
additional prompt...

## Test Styles: 
[Exercise/App or program building, Problem Solving, Solving, Conversion, Program enhancing/ debugging, Simulation]

## Conditions: 
[With edge cases, codes that are challenging to read(poorly written code (variable names, arrangements, etc.)) ]